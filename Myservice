import android.Manifest;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.Service;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.IBinder;
import android.support.annotation.MainThread;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.view.WindowManager;
import android.widget.Toast;

import com.example.aomeng.locationdemo4.server.DummyLocationService;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by Aomeng on 2017/10/5.
 */

public class MyService extends Service {

    private String locationProvider;
    protected LocationManager locationManager;
    private String provider = LocationManager.NETWORK_PROVIDER;
    @Nullable
    @Override
    public void onCreate() {
        System.out.println("1234");
        super.onCreate();


        String serviceString = Context.LOCATION_SERVICE;
        locationManager = (LocationManager) getSystemService(serviceString);

        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 3000, 0, mLocationListener01);
        //String provider=LocationManager.NETWORK_PROVIDER;
        String provider = LocationManager.NETWORK_PROVIDER;

        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            System.out.println("permission problem");
         //   ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 0);

        } else {
            System.out.println("know nothing");
            Location location = locationManager.getLastKnownLocation(provider);
            System.out.println("LOCATION" + location);
        }
        locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        List<String> providers = locationManager.getProviders(true);
        if (providers.contains(LocationManager.GPS_PROVIDER)) {
            locationProvider = LocationManager.GPS_PROVIDER;
        } else {
            Toast.makeText(this, "SOME ERROR", Toast.LENGTH_SHORT).show();
        }

        Location location = locationManager.getLastKnownLocation(locationProvider);
        if (location != null) {
            showLocation(location);
        }
    }
    private void showLocation(Location location) {
        String locationStr = "维度：" + location.getLatitude() + "\n"
                + "经度：" + location.getLongitude();
        String str_from=location.getLatitude()+","+location.getLongitude();
        for(int i=0;i<GlobalClass.friendLocationList.size();i++) {
            String str_to =GlobalClass.friendLocationList.get(i).latitude+","+GlobalClass.friendLocationList.get(i).longitude ;
            double lat=location.getLatitude()-GlobalClass.friendLocationList.get(i).latitude;
            double lon=location.getLongitude()-GlobalClass.friendLocationList.get(i).longitude;
            lat=lat/2+GlobalClass.friendLocationList.get(i).latitude;
            lon=lon/2+GlobalClass.friendLocationList.get(i).longitude;
            GlobalClass.friendLocationList.get(i).suggestLocationLat=lat;
            GlobalClass.friendLocationList.get(i).suggestLocationLon=lon;
            String url = "https://maps.googleapis.com/maps/api/distancematrix/json?origins=" + str_from + "&destinations=" + str_to + "&mode=driving&language=fr-FR&avoid=tolls";
            new GeoTask().execute(url);
            System.out.println(locationStr);

        }



        Toast.makeText(this, locationStr, Toast.LENGTH_LONG).show();
    }
    public final LocationListener mLocationListener01 = new LocationListener() {
        @Override
        public void onLocationChanged(Location location) {
            // updateToNewLocation(location);
        }


        @Override
        public void onProviderDisabled(String provider) {
            // updateToNewLocation(null);
        }

        @Override
        public void onProviderEnabled(String provider) {
        }

        @Override
        public void onStatusChanged(String provider, int status, Bundle extras) {
        }
    };



    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        return super.onStartCommand(intent, flags, startId);

    }

    @Override
    public void onDestroy() {
        System.out.println("222");
        super.onDestroy();
    }
    @Override
    public IBinder onBind(Intent intent) {
        System.out.println("333");
        return null;
    }

    public void setDouble(String result) {
        String res[]=result.split(",");
        Double min=Double.parseDouble(res[0])/60;
        int dist=Integer.parseInt(res[1])/1000;
        System.out.println("Duration= " + (int) (min / 60) + " hr " + (int) (min % 60) + " mins");
        System.out.println("Distance= " + dist + " kilometers");
    }
}
